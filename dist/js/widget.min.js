var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function e(e,t){var i=null;e.event?(i=e,i.file_url&&(i.file_format=n(i.file_url)),i.company_id=a,i.display_id=r,t(i)):t(i)}function t(){var e=new Date,t=e.getUTCFullYear(),n=e.getUTCMonth()+1,i=e.getUTCDate();return 10>n&&(n="0"+n),10>i&&(i="0"+i),t+n+i}function n(e){var t,n=/[?#&]/;return e&&"string"==typeof e?(t=e.substr(e.lastIndexOf(".")+1),n.test(t)&&(t=t.substr(0,-1!==t.indexOf("?")?t.indexOf("?"):t.length),t=t.substr(0,-1!==t.indexOf("#")?t.indexOf("#"):t.length),t=t.substr(0,-1!==t.indexOf("&")?t.indexOf("&"):t.length)),t.toLowerCase()):null}function i(e){var n={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:t(),rows:[{insertId:""}]},i=JSON.parse(JSON.stringify(n));return i.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),i.rows[0].json=JSON.parse(JSON.stringify(e)),i.rows[0].json.ts=(new Date).toISOString(),i}function o(t,n){e(n,function(e){null!==e&&RiseVision.Common.Logger.log(t,e)})}function s(e,t){a=e,r=t}var r="",a="";return{getInsertData:i,getFileFormat:n,logEvent:o,setIds:s}}(),RiseVision.Common.Logger=function(e){"use strict";function t(e){var t=new XMLHttpRequest;return new Date-c<358e4?e({}):(t.open("POST",o,!0),t.onloadend=function(){var n=JSON.parse(t.response);e({token:n.access_token,refreshedAt:new Date})},t.send(),void 0)}function n(e){return r&&l===e}function i(i,o){function g(t){var n,r,a=new XMLHttpRequest;r=s.replace("TABLE_ID",i),c=t.refreshedAt||c,u=t.token||u,n=e.getInsertData(o),a.open("POST",r,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+u),o.cb&&"function"==typeof o.cb&&(a.onloadend=function(){o.cb(a.response)}),a.send(JSON.stringify(n))}if(!(!i||!o||o.hasOwnProperty("event")&&!o.event||o.hasOwnProperty("event")&&n(o.event)))return r=!0,l=o.event,setTimeout(function(){r=!1},a),t(g)}var o="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",s="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",r=!1,a=1e3,l="",c=0,u="";return{log:i}}(RiseVision.Common.LoggerUtils),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var config={STORAGE_ENV:"prod"},RiseVision=RiseVision||{};RiseVision.WebPage={},RiseVision.WebPage=function(e,t){"use strict";function n(){t.rpc.call("","rsevent_ready",null,y.getString("id"),!0,!0,!0,!0,!1)}function i(e){function t(t){var n=!0,i=t.target.getResponseHeader("X-Frame-Options");i&&"SAMEORIGIN"===i.toUpperCase()&&(d({event:"error",event_details:"X-Frame-Options header",error_details:"SAMEORIGIN",url:_}),O.show("The owner of the Web Page at the URL provided does not allow the Page to be embedded within an iFrame. If possible, please contact the Web Page owner to discuss X-Frame-Options."),n=!1),e&&"function"==typeof e&&e(n)}var n="https://proxy.risevision.com/"+_,i=new XMLHttpRequest;i.addEventListener("load",t),i.open("GET",n),i.send()}function o(){var t=e.getElementById("container"),n=e.getElementById("webpage-frame"),i=y.getInt("rsH")/y.getInt("rsW")*100;t&&n&&(t.style.visibility="hidden",r(n),s(n),0!==E&&(i+=E/y.getInt("rsW")*100),t.setAttribute("style","padding-bottom:"+i+"%"))}function s(e){var t,n=parseFloat(h.zoom);t="-ms-zoom:"+n+";-moz-transform: scale("+n+");-moz-transform-origin: 0 0;-o-transform: scale("+n+");-o-transform-origin: 0 0;-webkit-transform: scale("+n+");-webkit-transform-origin: 0 0;transform: scale("+n+");transform-origin: 0 0;",t+="width: "+1/n*100+"%;height: "+1/n*100+"%;";var i=e.getAttribute("style");i&&(t=i+t),e.setAttribute("style",t)}function r(e){var t="",n=0;if(h.region&&h.region.showRegion&&"region"===h.region.showRegion&&(h.region.horizontal>0&&(n=h.region.horizontal),h.region.vertical>0&&(E=h.region.vertical),0!==n||0!==E)){t="margin: -"+E+"px 0 0 -"+n+"px;";var i=e.getAttribute("style");i&&(t=i+t),e.setAttribute("style",t)}}function a(){R=setInterval(function(){l()},h.refresh)}function l(){var t=e.getElementById("webpage-frame"),n=e.getElementById("container");n&&t&&(t.onload=function(){t.onload=null,n.style.visibility="visible",h.refresh>0&&null===R&&a()},t.setAttribute("src",_))}function c(){var t=e.getElementById("webpage-frame");h.refresh>0&&clearInterval(R),t&&(t.src="about:blank")}function u(){O=new RiseVision.Common.Message(e.getElementById("container"),e.getElementById("messageContainer")),_=h.url,-1===_.indexOf("://")&&(_="http://"+_),i(function(e){e&&o(),n()})}function g(){return"webpage_events"}function d(e){RiseVision.Common.LoggerUtils.logEvent(g(),e)}function f(){c()}function p(){l()}function m(){f()}function v(e){h=JSON.parse(JSON.stringify(e)),u()}var y=new t.Prefs,h=null,_="",E=0,R=null,O=null;return{getTableName:g,logEvent:d,setAdditionalParams:v,pause:f,play:p,stop:m}}(document,gadgets);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,t){"use strict";function n(){try{t.style.height=e.style.height}catch(n){console.warn("Can't initialize Message - ",n.message)}}function i(){if(s){for(;t.firstChild;)t.removeChild(t.firstChild);t.style.display="none",e.style.visibility="visible",s=!1}}function o(n){var i,o=document.createDocumentFragment();s?(i=t.querySelector(".message"),i.innerHTML=n):(e.style.visibility="hidden",t.style.display="block",i=document.createElement("p"),i.innerHTML=n,i.setAttribute("class","message"),o.appendChild(i),t.appendChild(o),s=!0)}var s=!1;return n(),{hide:i,show:o}},function(e,t,n){"use strict";function i(e,t){var n,i="",o="";Array.isArray(e)&&e.length>0&&Array.isArray(t)&&t.length>0&&("companyId"===e[0]&&(i=t[0]),"displayId"===e[1]&&(o=t[1]?t[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(i,o),"additionalParams"===e[2]&&(n=JSON.parse(t[2]),RiseVision.WebPage.setAdditionalParams(n)))}function o(){RiseVision.WebPage.play()}function s(){RiseVision.WebPage.pause()}function r(){RiseVision.WebPage.stop()}var a=(new n.Prefs).getString("id");e.oncontextmenu=function(){return!1},t.body.onmousedown=function(){return!1},a&&""!==a&&(n.rpc.register("rscmd_play_"+a,o),n.rpc.register("rscmd_pause_"+a,s),n.rpc.register("rscmd_stop_"+a,r),n.rpc.register("rsparam_set_"+a,i),n.rpc.call("","rsparam_get",null,a,["companyId","displayId","additionalParams"]))}(window,document,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-6"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}();
//# sourceMappingURL=data:application/json;base64,
